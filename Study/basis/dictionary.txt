📌 파이썬 딕셔너리 정리
✅ 요약
생성: {}, dict()
접근/수정: d[key], d.get()
삭제: pop, del, clear
반복: keys(), values(), items()
확장: update, setdefault
응용: 컴프리헨션, 중첩 구조

1. 생성
d = {"a": 1, "b": 2}
d = dict(a=1, b=2)        # 키는 문자열일 때만
d = dict([("a", 1), ("b", 2)])  # (키, 값) 튜플 리스트

2. 접근 & 수정
d = {"a": 1, "b": 2}
print(d["a"])       # 1
d["c"] = 3          # 새 키 추가
d["a"] = 100        # 값 수정
존재하지 않는 키를 d["x"]로 접근하면 KeyError.

3. 안전 접근
print(d.get("a"))          # 100
print(d.get("z"))          # None (없으면 기본값)
print(d.get("z", 0))       # 0 (기본값 지정 가능)

4. 삭제
d.pop("b")            # 해당 키 삭제 & 값 반환
del d["c"]            # 키 삭제
d.clear()             # 전체 삭제

5. 반복
d = {"a": 1, "b": 2}
for k in d:               # 키 반복
    print(k)
for k, v in d.items():    # (키, 값) 쌍 반복
    print(k, v)
for v in d.values():      # 값 반복
    print(v)
for k in d.keys():        # 키 반복 (위와 동일)
    print(k)

6. 유용한 메서드
d = {"a": 1, "b": 2}
print("a" in d)          # True (키 존재 여부)
print(len(d))            # 2 (키 개수)
d.setdefault("c", 3)     # 키 없으면 추가
print(d)                 # {'a': 1, 'b': 2, 'c': 3}
d.update({"a": 10, "d": 4})  # 병합/수정
print(d)                     # {'a': 10, 'b': 2, 'c': 3, 'd': 4}

7. 딕셔너리 컴프리헨션
squares = {x: x**2 for x in range(5)}
print(squares)   # {0:0, 1:1, 2:4, 3:9, 4:16}

8. 중첩 딕셔너리
students = {
    "철수": {"국어": 90, "영어": 85},
    "영희": {"국어": 95, "영어": 80}
}
print(students["철수"]["영어"])  # 85

9. 불변 조건
키(key)는 불변(immutable) 타입만 가능: 문자열, 숫자, 튜플(내부 값도 불변일 때).
값(value)은 아무 타입이나 가능.
