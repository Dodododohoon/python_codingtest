📘 Python Tuple 기본 정리

────────────────────────────
1️⃣ 튜플 기본 개념
────────────────────────────
- 튜플(tuple)은 '수정 불가능(immutable)'한 리스트와 같다.
- 즉, 생성 후에는 요소를 추가/삭제/변경할 수 없다.
- 리스트는 [] (대괄호), 튜플은 () (소괄호) 사용.

예시:
t1 = (1, 2, 3)
t2 = 1, 2, 3        # 괄호 생략도 가능
t3 = (1,)            # 요소가 하나일 땐 반드시 쉼표(,) 필요
t4 = tuple([1, 2, 3]) # 리스트를 튜플로 변환

────────────────────────────
2️⃣ 인덱싱 / 슬라이싱
────────────────────────────
- 리스트와 동일한 방식으로 접근 가능.
- 단, 수정은 불가능.

예시:
t = (10, 20, 30, 40)
print(t[0])    # 10
print(t[1:3])  # (20, 30)
print(t[-1])   # 40

────────────────────────────
3️⃣ 튜플 연산
────────────────────────────
- 덧셈(+) : 두 튜플을 이어붙임
- 곱셈(*) : 반복 생성
- len()   : 길이 반환
- in / not in : 포함 여부 확인

예시:
a = (1, 2)
b = (3, 4)
print(a + b)  # (1, 2, 3, 4)
print(a * 3)  # (1, 2, 1, 2, 1, 2)
print(len(a)) # 2
print(3 in b) # True

────────────────────────────
4️⃣ 자주 쓰는 메서드
────────────────────────────
(튜플은 변경 불가라, 리스트처럼 많은 메서드가 없음)

t = (1, 2, 2, 3)

- t.count(x)  → x의 개수 반환
  예시: t.count(2)  # 2

- t.index(x)  → x의 첫 번째 인덱스 반환
  예시: t.index(3)  # 3번째 인덱스 = 3

────────────────────────────
5️⃣ 기타 내장 함수 활용
────────────────────────────
sum(t)   → 합계
max(t)   → 최댓값
min(t)   → 최솟값
sorted(t)→ 정렬된 리스트 반환 (튜플 아님)
tuple(iterable) → 다른 자료형을 튜플로 변환

예시:
t = (5, 2, 8)
print(sum(t))       # 15
print(max(t))       # 8
print(sorted(t))    # [2, 5, 8]
print(tuple("abc")) # ('a', 'b', 'c')

────────────────────────────
6️⃣ 언패킹(Unpacking)
────────────────────────────
튜플의 요소를 변수 여러 개에 나누어 담을 수 있다.

예시:
person = ('홍길동', 25, '서울')
name, age, city = person
print(name, age, city)  # 홍길동 25 서울

────────────────────────────
7️⃣ 튜플 vs 리스트 차이 요약
────────────────────────────
| 항목 | 리스트(list) | 튜플(tuple) |
|------|---------------|--------------|
| 괄호 | []            | ()           |
| 변경 가능 여부 | 가능 | 불가능 |
| 속도 | 느림 | 빠름 |
| 메모리 사용 | 많음 | 적음 |
| 주요 사용처 | 데이터 수정 필요할 때 | 변경되면 안 되는 데이터 |

────────────────────────────
✅ 요약 정리
────────────────────────────
- 튜플은 불변(immutable) 리스트
- 괄호 () 또는 쉼표(,)로 생성
- count(), index() 메서드만 있음
- 변경 불가능 → 안전하고 빠름
- 다중 반환, 언패킹, 상수 데이터에 자주 사용
────────────────────────────