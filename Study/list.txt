📌 리스트 기본 문법
1. 리스트 생성
a = [1, 2, 3, 4]
a = [0] *5 # [0,0,0,0,0]
a = list(range(1, n+1))        #range(1, n+1) : 정수를 차례로 만들어내는 이터러블.
                                                #list(range(1,n+1)) 리스트 만들면서 차례로 정수 입력
2. 빈 리스트
a = []
3. 리스트에 원소 추가
a.append(5)   # [1, 2, 3, 4, 5]
3- 1. 여러 줄 입력을 한꺼번에 리스트로 받을 때:
nums = [int(input()) for _ in range(9)]
4. 리스트 원소 접근
print(a[0])   # 첫 번째 원소
print(a[-1])  # 마지막 원소
5. 리스트 원소 개수
len(a)   # 리스트 길이 반환
---
📌 입력값을 리스트로 받기
1. 문자열 리스트
data = input().split()
# 예: 입력 → "1 2 3"
# 결과 → ["1", "2", "3"]
2. 정수 리스트
data = list(map(int, input().split()))
# 예: 입력 → "1 2 3"
# 결과 → [1, 2, 3]
---
📌 리스트에서 필요한 기능
1. 특정 값 개수 세기
a = [1, 2, 1, 3, 1]
print(a.count(1))   # 3
2. 반복문으로 직접 세기
cnt = 0
for x in a:
    if x == 1:
        cnt += 1
===============================
📌 파이썬 리스트 자주 쓰는 메서드 정리
추가/삭제 : append, pop, remove
탐색/카운트 : index, count
정렬/뒤집기 : sort, sorted, reverse
기타 : len, sum, max, min, in

1. 원소 추가 / 삭제
- append(x) : 리스트 끝에 원소 추가
a = [1, 2]
a.append(3)      # [1, 2, 3]
- extend(iterable) : 다른 리스트/튜플 합치기
a = [1, 2]
a.extend([3, 4]) # [1, 2, 3, 4]
- insert(i, x) : 인덱스 i 위치에 원소 삽입
a = [1, 3]
a.insert(1, 2)   # [1, 2, 3]
- remove(x) : 첫 번째로 나오는 값 x 삭제
a = [1, 2, 2, 3]
a.remove(2)      # [1, 2, 3]
- pop(i) : 인덱스 i의 원소 삭제 후 반환 (기본은 마지막)
a = [1, 2, 3]
a.pop()          # 3, 리스트는 [1, 2]
a.pop(0)         # 1, 리스트는 [2]
- clear() : 모든 원소 삭제
a = [1, 2, 3]
a.clear()        # []
----------------------------------
2. 탐색 / 카운트
-index(x) : 값 x가 처음 나오는 위치 반환
a = [10, 20, 30]
a.index(20)      # 1
- count(x) : 값 x의 개수 세기
a = [1, 1, 2, 3]
a.count(1)       # 2
==========================
3. 정렬 / 뒤집기
- sort() : 리스트 정렬 (기본 오름차순)
a = [3, 1, 2]
a.sort()         # [1, 2, 3]
a.sort(reverse=True)  # [3, 2, 1]
- sorted(list) : 정렬된 새로운 리스트 반환 (원본 유지)
a = [3, 1, 2]
b = sorted(a)    # b = [1, 2, 3], a는 그대로 [3, 1, 2]
- reverse() : 리스트 원소 순서 뒤집기 (정렬 아님)
a = [1, 2, 3]
a.reverse()      # [3, 2, 1]
==========================
4. 기타 유용한 것들
- swap : 스왑
li[i], li[j] = li[j], li[i]        #[1,2] ->[2,1], 슬라이싱 활용 가능
- len(a) : 길이 (메서드는 아니지만 필수)
len([1,2,3])     # 3
- sum(a) : 합계 (숫자 리스트일 때만)
sum([1,2,3])     # 6
- max(a) / min(a) : 최댓값 / 최솟값
max([1,7,3])     # 7
min([1,7,3])     # 1
- in 연산자 : 원소 포함 여부 확인
a = [1, 2, 3]
2 in a           # True
5 in a           # False
---
====================================================
📌 리스트 슬라이싱 정리
1. 기본 문법
li[a:b]         # a부터 b-1까지 잘라오기
li[a:b:c]       # a부터 b-1까지 c 간격으로
a: 시작 인덱스 (생략하면 0)
b: 끝 인덱스 (생략하면 끝까지, b는 포함되지 않음)
c: 간격/스텝 (생략하면 1, 음수면 거꾸로)
---
2. 읽기 (잘라오기)
li = [10, 20, 30, 40, 50]
print(li[1:4])     # [20, 30, 40]
print(li[:3])      # [10, 20, 30]
print(li[2:])      # [30, 40, 50]
print(li[::2])     # [10, 30, 50]
print(li[::-1])    # [50, 40, 30, 20, 10] (뒤집기)
---
3. 쓰기 (대입/치환)
li = [0, 0, 0, 0, 0]
li[1:4] = [7, 7, 7]        # [0, 7, 7, 7, 0]
li[1:3] = [9]              # [0, 9, 0, 0] (길이 줄어듦)
li[2:2] = [1, 2]           # [0, 9, 1, 2, 0, 0] (삽입 효과)
li[:] = []                 # [] (전체 삭제)
👉 슬라이싱 대입은 길이가 달라도 허용 → 리스트 길이 자체가 변할 수 있음.
---
✅ 요약
li[a:b] → a부터 b-1까지 잘라서 새로운 리스트 반환
li[a:b:c] → 간격/역순 가능
li[a:b] = [...] → 해당 구간을 다른 리스트로 치환 (길이 달라도 가능)
자주 쓰는 패턴: [::-1] (뒤집기), [k]*(b-a) (구간 채우기), [:] = [] (전체 삭제)
